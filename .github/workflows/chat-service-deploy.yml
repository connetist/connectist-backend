name: chat-service-deploy

# 특정 폴더만 적용
# on:
#   push:
#     paths:
#       - 'chat-service/**'

permissions: write-all


on:
  push:

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:
    
      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # - name: make application.yml
      #   if: |
      #     contains(github.ref, 'main') ||
      #     contains(github.ref, 'develop')
      #   run: |
      #     mkdir ./src/main/resources # resources 폴더 생성
      #     cd ./src/main/resources # resources 폴더로 이동
      #     touch ./application.yml # application.yml 생성
      #     echo "${{ secrets.YML }}" > ./application.yml # github actions에서 설정한 값을 application.yml 파일에 쓰기
      #   shell: bash

      # # 환경별 yml 파일 생성(2) - dev
      # - name: make application-dev.yml
      #   if: contains(github.ref, 'develop')
      #   run: |
      #     cd ./src/main/resources
      #     touch ./application-dev.yml
      #     echo "${{ secrets.YML_DEV }}" > ./application-dev.yml
      #   shell: bash

      # # 환경별 yml 파일 생성(3) - prod
      # - name: make application-prod.yml
      #   if: contains(github.ref, 'main')
      #   run: |
      #     cd ./src/main/resources
      #     touch ./application-prod.yml
      #     echo "${{ secrets.YML_PROD }}" > ./application-prod.yml
      #   shell: bash
      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: 17
          # cache: 'gradle' # https://github.com/actions/setup-java#caching-packages-dependencies
      
      - name: Build with Gradle
        run: |
          cd chat-service
          ./gradlew clean build

      - name: Jacoco Report to PR
        id: jacoco
        uses: madrapps/jacoco-report@v1.6.1
        with:
          paths: chat-service/build/reports/jacoco/test/jacocoTestReport.xml
          token: ${{ secrets.GITHUB_TOKEN }}
          min-coverage-overall: 75
          min-coverage-changed-files: 75
          title: "⭐️Code Coverage"
          update-comment: true
#      - name: Jacoco Report to PR
#        id: jacoco
#        uses: madrapps/jacoco-report@v1.6.1
#        with:
#          paths: ${{ github.workspace }}/chat-service/build/reports/jacoco/test/jacocoTestReport.xml
#          token: ${{ secrets.GITHUB_TOKEN }}
#          min-coverage-overall: 75
#          min-coverage-changed-files: 75
#          title: "⭐️Code Coverage"
#          update-comment: true


      # docker build & push to production
      - name: Docker build & push to prod
        # if: contains(github.ref, 'main')
        run: |
          cd chat-service 
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/docker-test-prod .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test-prod
      - name: Deploy to prod
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_PROD }} # EC2 퍼블릭 IPv4 DNS
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          port : 22
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-testchat-prod
            sudo docker run -d -p 8761:8761 ${{ secrets.DOCKER_USERNAME }}/docker-testchat-prod
            sudo docker image prune -f
