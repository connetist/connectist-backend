plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.0'
	id 'io.spring.dependency-management' version '1.1.5'
	id 'jacoco'
}
jacoco {
	toolVersion '0.8.8' // 2. 버전명시
}
ext {
	set('springCloudVersion', "2023.0.1")
}
/** Jacoco start **/
test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	executionData(fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec"))

	reports {
		xml.required.set(true)
		html.required.set(true)
		csv.required.set(false)
		html.outputLocation.set(layout.buildDirectory.dir('jacocoHtml'))
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			element 'CLASS'
//			limit {
//				counter = 'BRANCH'
//				value = 'COVEREDRATIO'
////				minimum = 0.8 // 테스트 커버리지 최소 80%
//			}

			// 커버리지 체크를 제외할 클래스들
//			excludes = ['*.*Controller', '*.dto.*', '*.config.*', '*.domain.Q*']
		}
	}
}


check {
	dependsOn jacocoTestReport
}



group = 'org.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.kafka:spring-kafka'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testCompileOnly 'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'
//	implementation 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.kafka:spring-kafka-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'org.webjars.npm:github-com-stomp-js-stompjs:6.1.2'
	implementation 'org.webjars:bootstrap:3.3.7'
	implementation 'org.webjars:webjars-locator-core'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
}

tasks.named('test') {
	useJUnitPlatform()
}
dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}